// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.20.1
// source: tencentBidding_v3.proto

package model

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//协议中的request部分：非免审和免审接口共用
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *string                       `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                                        //用于标识一次请求的请求id，dsp需要在回复时在Response.id字段中填写该字段，带回给腾讯adx
	At                 *uint32                       `protobuf:"varint,2,opt,name=at,proto3,oneof" json:"at,omitempty"`                                                       //用于区分是第一高价竞价（值为1）还是第二高价竞价（值为2），腾讯采用第二高价竞价本字段填固定值2，dsp可以只处理at值为2的请求（仅rtb）
	Site               *Request_Site                 `protobuf:"bytes,3,opt,name=site,proto3,oneof" json:"site,omitempty"`                                                    //媒体站点信息（老的pc资源会填写，大部分资源都不填写本结构内的字段，dsp可以忽略本字段不处理）
	Device             *Request_Device               `protobuf:"bytes,4,opt,name=device,proto3,oneof" json:"device,omitempty"`                                                //设备信息 通过本结构可获取用户的设备id
	User               *Request_User                 `protobuf:"bytes,5,opt,name=user,proto3,oneof" json:"user,omitempty"`                                                    //用户信息
	Impression         []*Request_Impression         `protobuf:"bytes,6,rep,name=impression,proto3" json:"impression,omitempty"`                                              //曝光机会，一次请求可含多个广告位，每个广告位为一次曝光机会
	InnerInfo          *string                       `protobuf:"bytes,7,opt,name=inner_info,json=innerInfo,proto3,oneof" json:"inner_info,omitempty"`                         //[无效字段]内部使用
	App                *Request_App                  `protobuf:"bytes,8,opt,name=app,proto3,oneof" json:"app,omitempty"`                                                      //移动app信息 内部包括app的名称(仅移动端资源才有本字段，否则为空)
	UnlikeOrderList    []string                      `protobuf:"bytes,9,rep,name=unlike_order_list,json=unlikeOrderList,proto3" json:"unlike_order_list,omitempty"`           //用户不喜欢订单列表 dsp不能再出相同订单（仅rtb）
	Oids               []*Request_PlayOrder          `protobuf:"bytes,10,rep,name=oids,proto3" json:"oids,omitempty"`                                                         //新闻客户端当前频道当前已播放订单，透传给dsp用来做去重，dsp不能再出相同订单（仅rtb）
	RequestBlackOrders []string                      `protobuf:"bytes,11,rep,name=request_black_orders,json=requestBlackOrders,proto3" json:"request_black_orders,omitempty"` //请求级订单去重(手腾网去重)，dsp不能再出相同订单（仅rtb）
	ChannelBlackOrders []*Request_ChannelBlackOrders `protobuf:"bytes,12,rep,name=channel_black_orders,json=channelBlackOrders,proto3" json:"channel_black_orders,omitempty"` //请求级频道内订单去重(快报去重)，dsp不能再出相同订单（仅rtb）
	IsOrderCache       *bool                         `protobuf:"varint,13,opt,name=is_order_cache,json=isOrderCache,proto3,oneof" json:"is_order_cache,omitempty"`            //是否是订单池请求 新闻客户端订单池，dsp不能再出相同订单（仅rtb）
	IsFirstTime        *bool                         `protobuf:"varint,14,opt,name=is_first_time,json=isFirstTime,proto3,oneof" json:"is_first_time,omitempty"`               //[无效字段]是否冷启动，第一次打开APP
	TwinReq            *string                       `protobuf:"bytes,15,opt,name=twin_req,json=twinReq,proto3,oneof" json:"twin_req,omitempty"`                              // [无效字段]内部使用
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Request) GetAt() uint32 {
	if x != nil && x.At != nil {
		return *x.At
	}
	return 0
}

func (x *Request) GetSite() *Request_Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Request) GetDevice() *Request_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Request) GetUser() *Request_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Request) GetImpression() []*Request_Impression {
	if x != nil {
		return x.Impression
	}
	return nil
}

func (x *Request) GetInnerInfo() string {
	if x != nil && x.InnerInfo != nil {
		return *x.InnerInfo
	}
	return ""
}

func (x *Request) GetApp() *Request_App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Request) GetUnlikeOrderList() []string {
	if x != nil {
		return x.UnlikeOrderList
	}
	return nil
}

func (x *Request) GetOids() []*Request_PlayOrder {
	if x != nil {
		return x.Oids
	}
	return nil
}

func (x *Request) GetRequestBlackOrders() []string {
	if x != nil {
		return x.RequestBlackOrders
	}
	return nil
}

func (x *Request) GetChannelBlackOrders() []*Request_ChannelBlackOrders {
	if x != nil {
		return x.ChannelBlackOrders
	}
	return nil
}

func (x *Request) GetIsOrderCache() bool {
	if x != nil && x.IsOrderCache != nil {
		return *x.IsOrderCache
	}
	return false
}

func (x *Request) GetIsFirstTime() bool {
	if x != nil && x.IsFirstTime != nil {
		return *x.IsFirstTime
	}
	return false
}

func (x *Request) GetTwinReq() string {
	if x != nil && x.TwinReq != nil {
		return *x.TwinReq
	}
	return ""
}

//response协议部分：大部分字段为免审和非免审接口共用，仅creativedetails对象和bid.adid字段不共用
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string             `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`       // dsp必须填写Request.id字段中的内容，即使放弃本次曝光机会也必须回复本字段
	Bidid   *string             `protobuf:"bytes,2,opt,name=bidid,proto3,oneof" json:"bidid,omitempty"` // dsp方自己标识本次请求的请求id（可不填）
	Seatbid []*Response_SeatBid `protobuf:"bytes,3,rep,name=seatbid,proto3" json:"seatbid,omitempty"`   // 回复参与竞价信息，目前只支持将回复结果设置在seatbid[0]；
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Response) GetBidid() string {
	if x != nil && x.Bidid != nil {
		return *x.Bidid
	}
	return ""
}

func (x *Response) GetSeatbid() []*Response_SeatBid {
	if x != nil {
		return x.Seatbid
	}
	return nil
}

type Request_Impression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *string                              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                                //标识每一次曝光的唯一ID,需要在回复出单时回带给adx，填写到Response. seatbid[0]. bid. Id字段中
	Tagid         *string                              `protobuf:"bytes,2,opt,name=tagid,proto3,oneof" json:"tagid,omitempty"`                                          //广告位ID，dsp先同步到腾讯资源的素材标准，然后根据本字段识别曝光资源的来源（如源于腾讯网或新闻客户端，或者快报app）和素材标准（有几个素材，每个素材尺寸）（如：tagid =”App_Stream_news_news”表示新闻客户端信息流）
	Bidfloor      *float32                             `protobuf:"fixed32,3,opt,name=bidfloor,proto3,oneof" json:"bidfloor,omitempty"`                                  //曝光底价，单位:千次曝光分 dsp出价必须高于本字段的价格，否则无法参与竞价，adx会在底价校验环节过滤掉本次竞价（仅rtb）
	Banner        *Request_Impression_Banner           `protobuf:"bytes,4,opt,name=banner,proto3,oneof" json:"banner,omitempty"`                                        //banner广告位信息（框外资源才有，否则为空）本字段在移动端资源可以忽略
	Video         *Request_Impression_Video            `protobuf:"bytes,5,opt,name=video,proto3,oneof" json:"video,omitempty"`                                          //video广告位信息(框内资源才有，否则为空)
	Clientid      *string                              `protobuf:"bytes,6,opt,name=clientid,proto3,oneof" json:"clientid,omitempty"`                                    //[无效字段]
	Tradecode     *string                              `protobuf:"bytes,7,opt,name=tradecode,proto3,oneof" json:"tradecode,omitempty"`                                  //该广告位的限制行业编码列表，如：018;014008;008014013;006;001;004;002(一级，二级，三级)，行业编码的具体含义dsp可以离线同步到一个行业编码表（仅rtb）
	SnsLists      *string                              `protobuf:"bytes,8,opt,name=sns_lists,json=snsLists,proto3,oneof" json:"sns_lists,omitempty"`                    //[无效字段] 该广告位允许的社交化播放形式列表
	Dealid        *string                              `protobuf:"bytes,9,opt,name=dealid,proto3,oneof" json:"dealid,omitempty"`                                        // 预定的资源id，仅pd和pdb业务使用，通过本id可以知道本次曝光对应的品牌和排期，本字段为dsp选单的核心字段（仅pd&pdb）
	AdmRequire    []*Request_Impression_MaterialFormat `protobuf:"bytes,10,rep,name=adm_require,json=admRequire,proto3" json:"adm_require,omitempty"`                   //rtb时填写第一个默认播放形式要求的素材格式，dsp还可使用的其他rtb素材规格以离线同步为准，dsp可忽略本字段；pd&pdb时填写预定播放形式所要求的素材格式。当本字段存在时，DSP所回复的订单必须素材顺序和格式都一致;
	ImpExt        *Request_Impression_ImpExt           `protobuf:"bytes,11,opt,name=imp_ext,json=impExt,proto3,oneof" json:"imp_ext,omitempty"`                         //[无效字段]附加信息ssp使用
	Channel       *string                              `protobuf:"bytes,12,opt,name=channel,proto3,oneof" json:"channel,omitempty"`                                     //新闻频道号或视频内容id  仅提供编码，不提供频道映射关系
	Date          *string                              `protobuf:"bytes,13,opt,name=date,proto3,oneof" json:"date,omitempty"`                                           // 请求曝光的日期（闪屏用）格式 YYYY-MM-DD
	TagSeq        *uint32                              `protobuf:"varint,14,opt,name=tag_seq,json=tagSeq,proto3,oneof" json:"tag_seq,omitempty"`                        // [无效字段]信息流广告位的位置 1-255
	DisplayType   []*Request_Impression_DisplayType    `protobuf:"bytes,15,rep,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`                //播放形式类型（仅免审核模式才有本字段，rtb时列举所有可用的播放形式，pd&pdb时只有一个预定的播放形式）
	Dealids       []string                             `protobuf:"bytes,16,rep,name=dealids,proto3" json:"dealids,omitempty"`                                           //本次曝光的备选资源id（可选）（仅pd订单）
	MaxOrderCount *uint32                              `protobuf:"varint,17,opt,name=max_order_count,json=maxOrderCount,proto3,oneof" json:"max_order_count,omitempty"` //允许对这个imp回复的最大订单数（仅rtb）
	TwinImp       *string                              `protobuf:"bytes,18,opt,name=twin_imp,json=twinImp,proto3,oneof" json:"twin_imp,omitempty"`                      // [无效字段]内部使用
	DisplayIds    []uint32                             `protobuf:"varint,20,rep,packed,name=display_ids,json=displayIds,proto3" json:"display_ids,omitempty"`           // 对应的播放形式ID，RTB时为所有支持的播放形式，PDB/PD时为主备选订单对应的播放形式
}

func (x *Request_Impression) Reset() {
	*x = Request_Impression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Impression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Impression) ProtoMessage() {}

func (x *Request_Impression) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Impression.ProtoReflect.Descriptor instead.
func (*Request_Impression) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Request_Impression) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Request_Impression) GetTagid() string {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return ""
}

func (x *Request_Impression) GetBidfloor() float32 {
	if x != nil && x.Bidfloor != nil {
		return *x.Bidfloor
	}
	return 0
}

func (x *Request_Impression) GetBanner() *Request_Impression_Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *Request_Impression) GetVideo() *Request_Impression_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Request_Impression) GetClientid() string {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return ""
}

func (x *Request_Impression) GetTradecode() string {
	if x != nil && x.Tradecode != nil {
		return *x.Tradecode
	}
	return ""
}

func (x *Request_Impression) GetSnsLists() string {
	if x != nil && x.SnsLists != nil {
		return *x.SnsLists
	}
	return ""
}

func (x *Request_Impression) GetDealid() string {
	if x != nil && x.Dealid != nil {
		return *x.Dealid
	}
	return ""
}

func (x *Request_Impression) GetAdmRequire() []*Request_Impression_MaterialFormat {
	if x != nil {
		return x.AdmRequire
	}
	return nil
}

func (x *Request_Impression) GetImpExt() *Request_Impression_ImpExt {
	if x != nil {
		return x.ImpExt
	}
	return nil
}

func (x *Request_Impression) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *Request_Impression) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *Request_Impression) GetTagSeq() uint32 {
	if x != nil && x.TagSeq != nil {
		return *x.TagSeq
	}
	return 0
}

func (x *Request_Impression) GetDisplayType() []*Request_Impression_DisplayType {
	if x != nil {
		return x.DisplayType
	}
	return nil
}

func (x *Request_Impression) GetDealids() []string {
	if x != nil {
		return x.Dealids
	}
	return nil
}

func (x *Request_Impression) GetMaxOrderCount() uint32 {
	if x != nil && x.MaxOrderCount != nil {
		return *x.MaxOrderCount
	}
	return 0
}

func (x *Request_Impression) GetTwinImp() string {
	if x != nil && x.TwinImp != nil {
		return *x.TwinImp
	}
	return ""
}

func (x *Request_Impression) GetDisplayIds() []uint32 {
	if x != nil {
		return x.DisplayIds
	}
	return nil
}

type Request_Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`       //网站名称
	Page    *string `protobuf:"bytes,2,opt,name=page,proto3,oneof" json:"page,omitempty"`       //当前页面url
	Ref     *string `protobuf:"bytes,3,opt,name=ref,proto3,oneof" json:"ref,omitempty"`         //referrer url 无效字段
	Channel *string `protobuf:"bytes,4,opt,name=channel,proto3,oneof" json:"channel,omitempty"` //频道号   无效字段
}

func (x *Request_Site) Reset() {
	*x = Request_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Site) ProtoMessage() {}

func (x *Request_Site) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Site.ProtoReflect.Descriptor instead.
func (*Request_Site) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Request_Site) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Request_Site) GetPage() string {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return ""
}

func (x *Request_Site) GetRef() string {
	if x != nil && x.Ref != nil {
		return *x.Ref
	}
	return ""
}

func (x *Request_Site) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

type Request_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             *string                    `protobuf:"bytes,1,opt,name=ip,proto3,oneof" json:"ip,omitempty"`                           //用户ip
	Ua             *string                    `protobuf:"bytes,2,opt,name=ua,proto3,oneof" json:"ua,omitempty"`                           //设备user-agent
	Geo            *Request_Device_Geo        `protobuf:"bytes,3,opt,name=geo,proto3,oneof" json:"geo,omitempty"`                         //[无效字段] 地理位置信息，只提供一定精度模糊值
	Idfa           *string                    `protobuf:"bytes,4,opt,name=idfa,proto3,oneof" json:"idfa,omitempty"`                       //IDFA,默认不加密,用户设备如果为ios系统且未关闭idfa，本字段会填写原始idfa，否则为空
	IdfaEnc        *uint32                    `protobuf:"varint,5,opt,name=idfa_enc,json=idfaEnc,proto3,oneof" json:"idfa_enc,omitempty"` //0: 明文，1 ：MD5(idfa)转大写, 2:SHA1 表示idfa是否加密,默认填0表示不加密，若无idfa则本字段为空
	Openudid       *string                    `protobuf:"bytes,6,opt,name=openudid,proto3,oneof" json:"openudid,omitempty"`               //Openudid, 默认不加密，用户设备如果为ios或android，本字段会填写原始openudid，否则为空
	Carrier        *uint32                    `protobuf:"varint,7,opt,name=carrier,proto3,oneof" json:"carrier,omitempty"`                //运营商标识，生成规则是MCC+MNC，见 https://en.wikipedia.org/wiki/Mobile_country_code#China_-_CN
	Make           *string                    `protobuf:"bytes,8,opt,name=make,proto3,oneof" json:"make,omitempty"`                       //[无效字段]设备品牌，如视频"Apple"，"OPPO" 仅移动视频有本字段，移动新闻的和model字段放一起
	Model          *string                    `protobuf:"bytes,9,opt,name=model,proto3,oneof" json:"model,omitempty"`                     //[无效字段]设备型号，如视频"iPhone" "R9s" ;  如移动新闻“OPPO R9 Plusm A”
	Os             *string                    `protobuf:"bytes,10,opt,name=os,proto3,oneof" json:"os,omitempty"`                          //设备操作系统，如"iPhone.OS.9.3.2" "Android 5.0.2"
	Osv            *string                    `protobuf:"bytes,11,opt,name=Osv,proto3,oneof" json:"Osv,omitempty"`                        //[无效字段]设备操作系统版本，如"3.1.2"
	Js             *uint32                    `protobuf:"varint,12,opt,name=Js,proto3,oneof" json:"Js,omitempty"`                         //[无效字段]是否支持javascript 1:支持JavaScript; 0:不支持，
	Connectiontype *uint32                    `protobuf:"varint,13,opt,name=connectiontype,proto3,oneof" json:"connectiontype,omitempty"` //连接类型，0：未知; 1：以太网; 2：Wifi; 3：移动数据-未知; 4：2G; 5：3G; 6：4G
	Devicetype     *uint32                    `protobuf:"varint,14,opt,name=devicetype,proto3,oneof" json:"devicetype,omitempty"`         //[无效字段]设备类型 1：手机/平板  2：个人电脑  3：TV
	Mac            *string                    `protobuf:"bytes,15,opt,name=mac,proto3,oneof" json:"mac,omitempty"`                        //加密后的mac, MD5(MAC)转大写    加密前先进行格式转换（去除分隔符‘:’->转大写），仅android设备会填写本字段，否则为空
	Imei           *string                    `protobuf:"bytes,16,opt,name=imei,proto3,oneof" json:"imei,omitempty"`                      //加密后的imei, MD5(imei)，大小写兼容，对原始值加密，仅android设备会填写本字段，否则为空
	Androidid      *string                    `protobuf:"bytes,17,opt,name=androidid,proto3,oneof" json:"androidid,omitempty"`            //加密后的androidid, MD5(androidid)转大写  对原始值加密，仅android设备会填写本字段，否则为空
	Oaid           *string                    `protobuf:"bytes,18,opt,name=oaid,proto3,oneof" json:"oaid,omitempty"`                      // oaid原始值
	QaidInfos      []*Request_Device_QaidInfo `protobuf:"bytes,19,rep,name=qaid_infos,json=qaidInfos,proto3" json:"qaid_infos,omitempty"`
	IdfaMd5Sum     *string                    `protobuf:"bytes,21,opt,name=idfa_md5sum,json=idfaMd5sum,proto3,oneof" json:"idfa_md5sum,omitempty"` // IDFA设备号保持大写，进行md5编码，大小写兼容，32位；md5(idfa.toUpperCase())；
	OaidMd5Sum     *string                    `protobuf:"bytes,22,opt,name=oaid_md5sum,json=oaidMd5sum,proto3,oneof" json:"oaid_md5sum,omitempty"` // oaid原值进行md5后小写输出
}

func (x *Request_Device) Reset() {
	*x = Request_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Device) ProtoMessage() {}

func (x *Request_Device) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Device.ProtoReflect.Descriptor instead.
func (*Request_Device) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Request_Device) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Request_Device) GetUa() string {
	if x != nil && x.Ua != nil {
		return *x.Ua
	}
	return ""
}

func (x *Request_Device) GetGeo() *Request_Device_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *Request_Device) GetIdfa() string {
	if x != nil && x.Idfa != nil {
		return *x.Idfa
	}
	return ""
}

func (x *Request_Device) GetIdfaEnc() uint32 {
	if x != nil && x.IdfaEnc != nil {
		return *x.IdfaEnc
	}
	return 0
}

func (x *Request_Device) GetOpenudid() string {
	if x != nil && x.Openudid != nil {
		return *x.Openudid
	}
	return ""
}

func (x *Request_Device) GetCarrier() uint32 {
	if x != nil && x.Carrier != nil {
		return *x.Carrier
	}
	return 0
}

func (x *Request_Device) GetMake() string {
	if x != nil && x.Make != nil {
		return *x.Make
	}
	return ""
}

func (x *Request_Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *Request_Device) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *Request_Device) GetOsv() string {
	if x != nil && x.Osv != nil {
		return *x.Osv
	}
	return ""
}

func (x *Request_Device) GetJs() uint32 {
	if x != nil && x.Js != nil {
		return *x.Js
	}
	return 0
}

func (x *Request_Device) GetConnectiontype() uint32 {
	if x != nil && x.Connectiontype != nil {
		return *x.Connectiontype
	}
	return 0
}

func (x *Request_Device) GetDevicetype() uint32 {
	if x != nil && x.Devicetype != nil {
		return *x.Devicetype
	}
	return 0
}

func (x *Request_Device) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *Request_Device) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *Request_Device) GetAndroidid() string {
	if x != nil && x.Androidid != nil {
		return *x.Androidid
	}
	return ""
}

func (x *Request_Device) GetOaid() string {
	if x != nil && x.Oaid != nil {
		return *x.Oaid
	}
	return ""
}

func (x *Request_Device) GetQaidInfos() []*Request_Device_QaidInfo {
	if x != nil {
		return x.QaidInfos
	}
	return nil
}

func (x *Request_Device) GetIdfaMd5Sum() string {
	if x != nil && x.IdfaMd5Sum != nil {
		return *x.IdfaMd5Sum
	}
	return ""
}

func (x *Request_Device) GetOaidMd5Sum() string {
	if x != nil && x.OaidMd5Sum != nil {
		return *x.OaidMd5Sum
	}
	return ""
}

type Request_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *string  `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`              //tuid   dsp与腾讯进行cookieMapping后产生的腾讯侧用户标识tuid（不推荐使用）
	Buyerid *string  `protobuf:"bytes,2,opt,name=buyerid,proto3,oneof" json:"buyerid,omitempty"`    //dsp user id  dsp与腾讯进行cookieMapping后保存的dsp侧的用户标识（推荐dsp使用本字段识别用户）
	Gender  *string  `protobuf:"bytes,3,opt,name=gender,proto3,oneof" json:"gender,omitempty"`      //[无效字段] 性别 M 代表男 F 代表女 不填代表未知
	Age     *uint32  `protobuf:"varint,4,opt,name=age,proto3,oneof" json:"age,omitempty"`           //[无效字段] 年龄（0-20（0）、21-30（1）、31-40（2）、41-50(3)、51-60(4)、60+(5)这几个分段）不填代表未知 [无效字段]
	TagId   []string `protobuf:"bytes,5,rep,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"` // 人群包信息 （非用户隐私数据，仅合作方dsp使用）
}

func (x *Request_User) Reset() {
	*x = Request_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_User) ProtoMessage() {}

func (x *Request_User) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_User.ProtoReflect.Descriptor instead.
func (*Request_User) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Request_User) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Request_User) GetBuyerid() string {
	if x != nil && x.Buyerid != nil {
		return *x.Buyerid
	}
	return ""
}

func (x *Request_User) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *Request_User) GetAge() uint32 {
	if x != nil && x.Age != nil {
		return *x.Age
	}
	return 0
}

func (x *Request_User) GetTagId() []string {
	if x != nil {
		return x.TagId
	}
	return nil
}

type Request_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string  `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`           //[无效字段]应用程序ID，Android 上表现为程序的包名, 例如：com.rovio.angrybirds，iOS 上表现为AppStore 上的ID，例如：327860。
	Name       *string  `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`       //应用程序名称 如“腾讯视频 4.7.0.9924” “腾讯新闻 4.9.1”
	Domain     *string  `protobuf:"bytes,3,opt,name=domain,proto3,oneof" json:"domain,omitempty"`   //[无效字段]应用程序域名。
	Cat        []string `protobuf:"bytes,4,rep,name=cat,proto3" json:"cat,omitempty"`               //[无效字段]应用在AppStore 或者GooglePlay 或者其他应用市场的的分类信息。
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat,proto3" json:"sectioncat,omitempty"` //[无效字段]子分类。
}

func (x *Request_App) Reset() {
	*x = Request_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_App) ProtoMessage() {}

func (x *Request_App) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_App.ProtoReflect.Descriptor instead.
func (*Request_App) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Request_App) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Request_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Request_App) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *Request_App) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Request_App) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

type Request_PlayOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid   *string `protobuf:"bytes,1,opt,name=oid,proto3,oneof" json:"oid,omitempty"`      //订单号
	Index *uint32 `protobuf:"varint,2,opt,name=index,proto3,oneof" json:"index,omitempty"` //订单相对位置（新闻客户端才会填）
}

func (x *Request_PlayOrder) Reset() {
	*x = Request_PlayOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_PlayOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_PlayOrder) ProtoMessage() {}

func (x *Request_PlayOrder) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_PlayOrder.ProtoReflect.Descriptor instead.
func (*Request_PlayOrder) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Request_PlayOrder) GetOid() string {
	if x != nil && x.Oid != nil {
		return *x.Oid
	}
	return ""
}

func (x *Request_PlayOrder) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Request_ChannelBlackOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   *uint32  `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3,oneof" json:"channel_id,omitempty"`
	BlackOrders []string `protobuf:"bytes,2,rep,name=black_orders,json=blackOrders,proto3" json:"black_orders,omitempty"` //频道内不允许出现的订单
}

func (x *Request_ChannelBlackOrders) Reset() {
	*x = Request_ChannelBlackOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_ChannelBlackOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_ChannelBlackOrders) ProtoMessage() {}

func (x *Request_ChannelBlackOrders) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_ChannelBlackOrders.ProtoReflect.Descriptor instead.
func (*Request_ChannelBlackOrders) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Request_ChannelBlackOrders) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *Request_ChannelBlackOrders) GetBlackOrders() []string {
	if x != nil {
		return x.BlackOrders
	}
	return nil
}

type Request_Impression_ImpExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chid  *uint32  `protobuf:"varint,1,opt,name=chid,proto3,oneof" json:"chid,omitempty"`    //渠道id
	Stype []uint32 `protobuf:"varint,2,rep,packed,name=stype,proto3" json:"stype,omitempty"` //ssp专用：仅图片（默认）2：仅文字；3：图文（信息流）4:三小图
}

func (x *Request_Impression_ImpExt) Reset() {
	*x = Request_Impression_ImpExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Impression_ImpExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Impression_ImpExt) ProtoMessage() {}

func (x *Request_Impression_ImpExt) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Impression_ImpExt.ProtoReflect.Descriptor instead.
func (*Request_Impression_ImpExt) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Request_Impression_ImpExt) GetChid() uint32 {
	if x != nil && x.Chid != nil {
		return *x.Chid
	}
	return 0
}

func (x *Request_Impression_ImpExt) GetStype() []uint32 {
	if x != nil {
		return x.Stype
	}
	return nil
}

type Request_Impression_Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width      *uint32  `protobuf:"varint,1,opt,name=width,proto3,oneof" json:"width,omitempty"`                            //广告位宽度
	Height     *uint32  `protobuf:"varint,2,opt,name=height,proto3,oneof" json:"height,omitempty"`                          //广告位高度
	Mimes      []string `protobuf:"bytes,3,rep,name=mimes,proto3" json:"mimes,omitempty"`                                   //支持的素材类型(如 "jpg","swf") repeated结构表示可以是多种选择中的一个，如“jpg”，“gif”，“swf”
	ExtraStyle *string  `protobuf:"bytes,4,opt,name=extra_style,json=extraStyle,proto3,oneof" json:"extra_style,omitempty"` //该广告位除广告位规格外额外允许投放的素材尺寸：960*90;1000*90(分号分隔多个 宽*高)
	Visibility *uint32  `protobuf:"varint,5,opt,name=visibility,proto3,oneof" json:"visibility,omitempty"`                  //广告位所在的屏幕位置: 0:未知 1：首屏 2：非首屏（腾讯网等pc资源才有本字段，否则为空）
}

func (x *Request_Impression_Banner) Reset() {
	*x = Request_Impression_Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Impression_Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Impression_Banner) ProtoMessage() {}

func (x *Request_Impression_Banner) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Impression_Banner.ProtoReflect.Descriptor instead.
func (*Request_Impression_Banner) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Request_Impression_Banner) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Request_Impression_Banner) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Request_Impression_Banner) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *Request_Impression_Banner) GetExtraStyle() string {
	if x != nil && x.ExtraStyle != nil {
		return *x.ExtraStyle
	}
	return ""
}

func (x *Request_Impression_Banner) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

type Request_Impression_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mimes       []string `protobuf:"bytes,1,rep,name=mimes,proto3" json:"mimes,omitempty"`                    //支持播放的内容类型(如 "flv","swf")
	Linearity   *uint32  `protobuf:"varint,2,opt,name=linearity,proto3,oneof" json:"linearity,omitempty"`     //[无效字段]默认值填1  linear/in-stream(1) or non-linear/overlay(2)
	Minduration *uint32  `protobuf:"varint,3,opt,name=minduration,proto3,oneof" json:"minduration,omitempty"` //广告视频最短时长 单位毫秒 口播、前贴、中插和后贴这几个资源位dsp出单的素材时长不能小于最小时长（仅rtb）
	Maxduration *uint32  `protobuf:"varint,4,opt,name=maxduration,proto3,oneof" json:"maxduration,omitempty"` //广告视频最长时长 单位毫秒 口播、前贴、中插和后贴这几个资源位dsp出单的素材时长不能大于最大时长
	Protocol    *uint32  `protobuf:"varint,5,opt,name=protocol,proto3,oneof" json:"protocol,omitempty"`       //[无效字段]目前没有实际作用，vast 1.0/2.0/3.0/wrapper
	Width       *uint32  `protobuf:"varint,6,opt,name=width,proto3,oneof" json:"width,omitempty"`             //广告位宽度
	Height      *uint32  `protobuf:"varint,7,opt,name=height,proto3,oneof" json:"height,omitempty"`           //广告位高度
}

func (x *Request_Impression_Video) Reset() {
	*x = Request_Impression_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Impression_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Impression_Video) ProtoMessage() {}

func (x *Request_Impression_Video) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Impression_Video.ProtoReflect.Descriptor instead.
func (*Request_Impression_Video) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 0, 2}
}

func (x *Request_Impression_Video) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *Request_Impression_Video) GetLinearity() uint32 {
	if x != nil && x.Linearity != nil {
		return *x.Linearity
	}
	return 0
}

func (x *Request_Impression_Video) GetMinduration() uint32 {
	if x != nil && x.Minduration != nil {
		return *x.Minduration
	}
	return 0
}

func (x *Request_Impression_Video) GetMaxduration() uint32 {
	if x != nil && x.Maxduration != nil {
		return *x.Maxduration
	}
	return 0
}

func (x *Request_Impression_Video) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

func (x *Request_Impression_Video) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Request_Impression_Video) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type Request_Impression_MaterialFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  *uint32 `protobuf:"varint,1,opt,name=width,proto3,oneof" json:"width,omitempty"`   //广告位宽度,txt类型时表示中文个数
	Height *uint32 `protobuf:"varint,2,opt,name=height,proto3,oneof" json:"height,omitempty"` //广告位高度,txt类型时高度为0
	Mimes  *string `protobuf:"bytes,3,opt,name=mimes,proto3,oneof" json:"mimes,omitempty"`    //此种播放形式要求的,素材允许的类型,全部小写,多个格式用,隔开 如“swf,jgp,txt”
}

func (x *Request_Impression_MaterialFormat) Reset() {
	*x = Request_Impression_MaterialFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Impression_MaterialFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Impression_MaterialFormat) ProtoMessage() {}

func (x *Request_Impression_MaterialFormat) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Impression_MaterialFormat.ProtoReflect.Descriptor instead.
func (*Request_Impression_MaterialFormat) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Request_Impression_MaterialFormat) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Request_Impression_MaterialFormat) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Request_Impression_MaterialFormat) GetMimes() string {
	if x != nil && x.Mimes != nil {
		return *x.Mimes
	}
	return ""
}

type Request_Impression_DisplayType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayType *uint32                              `protobuf:"varint,1,opt,name=display_type,json=displayType,proto3,oneof" json:"display_type,omitempty"` //允许广告形式 1:信息流大图 2:原生信息流 3:信息流三小图 4:组图最后一帧 5:前帖片 6:暂停 7:视频信息流视频广告
	ClickType   []uint32                             `protobuf:"varint,2,rep,packed,name=click_type,json=clickType,proto3" json:"click_type,omitempty"`      //点击类型 1：app唤醒  2：下载  0：默认跳转落地页
	AdmRequire  []*Request_Impression_MaterialFormat `protobuf:"bytes,3,rep,name=adm_require,json=admRequire,proto3" json:"adm_require,omitempty"`           //免审核rtb方式下 要求DSP回复的素材格式。多素材广告时，DSP所回复的订单必须素材顺序和格式都一致（仅rtb）
}

func (x *Request_Impression_DisplayType) Reset() {
	*x = Request_Impression_DisplayType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Impression_DisplayType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Impression_DisplayType) ProtoMessage() {}

func (x *Request_Impression_DisplayType) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Impression_DisplayType.ProtoReflect.Descriptor instead.
func (*Request_Impression_DisplayType) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Request_Impression_DisplayType) GetDisplayType() uint32 {
	if x != nil && x.DisplayType != nil {
		return *x.DisplayType
	}
	return 0
}

func (x *Request_Impression_DisplayType) GetClickType() []uint32 {
	if x != nil {
		return x.ClickType
	}
	return nil
}

func (x *Request_Impression_DisplayType) GetAdmRequire() []*Request_Impression_MaterialFormat {
	if x != nil {
		return x.AdmRequire
	}
	return nil
}

type Request_Device_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  *float32 `protobuf:"fixed32,1,opt,name=latitude,proto3,oneof" json:"latitude,omitempty"`   //纬度，取值从-90到90，南为负值
	Longitude *float32 `protobuf:"fixed32,2,opt,name=longitude,proto3,oneof" json:"longitude,omitempty"` //经度，取值从-180到180，西为负值
}

func (x *Request_Device_Geo) Reset() {
	*x = Request_Device_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Device_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Device_Geo) ProtoMessage() {}

func (x *Request_Device_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Device_Geo.ProtoReflect.Descriptor instead.
func (*Request_Device_Geo) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Request_Device_Geo) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *Request_Device_Geo) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

// 多版本QAID信息
type Request_Device_QaidInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// QAID版本，同时区分QAID含义
	Version *uint32 `protobuf:"varint,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// QAID值
	Qaid *string `protobuf:"bytes,2,opt,name=qaid,proto3,oneof" json:"qaid,omitempty"`
	// 原始版本
	OriginVersion *string `protobuf:"bytes,3,opt,name=origin_version,json=originVersion,proto3,oneof" json:"origin_version,omitempty"`
	// QAID md5值
	QaidMd5Sum *string `protobuf:"bytes,4,opt,name=qaid_md5sum,json=qaidMd5sum,proto3,oneof" json:"qaid_md5sum,omitempty"` // qaid原值进行md5后小写输出
}

func (x *Request_Device_QaidInfo) Reset() {
	*x = Request_Device_QaidInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Device_QaidInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Device_QaidInfo) ProtoMessage() {}

func (x *Request_Device_QaidInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Device_QaidInfo.ProtoReflect.Descriptor instead.
func (*Request_Device_QaidInfo) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Request_Device_QaidInfo) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Request_Device_QaidInfo) GetQaid() string {
	if x != nil && x.Qaid != nil {
		return *x.Qaid
	}
	return ""
}

func (x *Request_Device_QaidInfo) GetOriginVersion() string {
	if x != nil && x.OriginVersion != nil {
		return *x.OriginVersion
	}
	return ""
}

func (x *Request_Device_QaidInfo) GetQaidMd5Sum() string {
	if x != nil && x.QaidMd5Sum != nil {
		return *x.QaidMd5Sum
	}
	return ""
}

// 该对象仅供免审接口使用
type Response_CreativeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Materials        []*Response_CreativeDetails_MaterialInfo `protobuf:"bytes,1,rep,name=materials,proto3" json:"materials,omitempty"`                                         // 创意中每个素材的具体信息
	AppInfo          *Response_CreativeDetails_AppInfo        `protobuf:"bytes,2,opt,name=app_info,json=appInfo,proto3,oneof" json:"app_info,omitempty"`                        // 应用直达和下载的信息 【高级功能】
	Monitorurl       []string                                 `protobuf:"bytes,3,rep,name=monitorurl,proto3" json:"monitorurl,omitempty"`                                       // 第三方曝光监测URL，最多3个
	ClickMonitorUrls []string                                 `protobuf:"bytes,4,rep,name=click_monitor_urls,json=clickMonitorUrls,proto3" json:"click_monitor_urls,omitempty"` // 第三方点击监测URL，最多3个
	ClickUrl         *string                                  `protobuf:"bytes,5,opt,name=click_url,json=clickUrl,proto3,oneof" json:"click_url,omitempty"`                     // 点击落地页
	UniversalLink    *string                                  `protobuf:"bytes,6,opt,name=universal_link,json=universalLink,proto3,oneof" json:"universal_link,omitempty"`      // universal_link，如使用ulink唤起，且点击落地页为空，adx将自动把ulink字段内容复制到click_url字段中
}

func (x *Response_CreativeDetails) Reset() {
	*x = Response_CreativeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_CreativeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_CreativeDetails) ProtoMessage() {}

func (x *Response_CreativeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_CreativeDetails.ProtoReflect.Descriptor instead.
func (*Response_CreativeDetails) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Response_CreativeDetails) GetMaterials() []*Response_CreativeDetails_MaterialInfo {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *Response_CreativeDetails) GetAppInfo() *Response_CreativeDetails_AppInfo {
	if x != nil {
		return x.AppInfo
	}
	return nil
}

func (x *Response_CreativeDetails) GetMonitorurl() []string {
	if x != nil {
		return x.Monitorurl
	}
	return nil
}

func (x *Response_CreativeDetails) GetClickMonitorUrls() []string {
	if x != nil {
		return x.ClickMonitorUrls
	}
	return nil
}

func (x *Response_CreativeDetails) GetClickUrl() string {
	if x != nil && x.ClickUrl != nil {
		return *x.ClickUrl
	}
	return ""
}

func (x *Response_CreativeDetails) GetUniversalLink() string {
	if x != nil && x.UniversalLink != nil {
		return *x.UniversalLink
	}
	return ""
}

type Response_Bid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *string                   `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                                   // dsp自己标识一次曝光机会的id（可不填）
	Impid           *string                   `protobuf:"bytes,2,opt,name=impid,proto3,oneof" json:"impid,omitempty"`                                             // 必填，标识曝光ID(设置为对应Request.Impression.id)
	Price           *float32                  `protobuf:"fixed32,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                                           // dsp对本次曝光的出价，单位千次曝光分 （仅rtb）
	Adid            *string                   `protobuf:"bytes,4,opt,name=adid,proto3,oneof" json:"adid,omitempty"`                                               // 外部DSP平台的广告创意ID，跟素材上传api中的dsp_order_id相同，仅审核接口使用
	Ext             *string                   `protobuf:"bytes,7,opt,name=ext,proto3,oneof" json:"ext,omitempty"`                                                 // 替换曝光监测和点击落地页和点击检测中的宏${EXT}。(必须base64编码，单个宏不超过512字节，整个URL总长不超过768字节) （可不填）
	Ext2            *string                   `protobuf:"bytes,10,opt,name=ext2,proto3,oneof" json:"ext2,omitempty"`                                              // 替换曝光监测、点击落地页和点击监测中的宏${EXT2}。(长度及编码要求同ext) （可不填）
	DispExts        []string                  `protobuf:"bytes,11,rep,name=disp_exts,json=dispExts,proto3" json:"disp_exts,omitempty"`                            // 只替换曝光监测的宏， repeated字段最多3个，分别替换这三个宏${DISPLAY_EXT1}${DISPLAY_EXT2}${DISPLAY_EXT3}，(长度及编码要求同ext)（可不填）
	ClickExts       []string                  `protobuf:"bytes,12,rep,name=click_exts,json=clickExts,proto3" json:"click_exts,omitempty"`                         // click monitor exts ${CLICK_EXT1/2/3} 最多3个 (长度及编码要求同ext)（可不填）
	Ext3            *string                   `protobuf:"bytes,13,opt,name=ext3,proto3,oneof" json:"ext3,omitempty"`                                              // 替换曝光监测、点击落地页和点击监测中的宏${EXT3} (长度及编码要求同ext)（可不填）
	Dealid          *string                   `protobuf:"bytes,16,opt,name=dealid,proto3,oneof" json:"dealid,omitempty"`                                          // 指定选中的订单id，如果为空，则默认为Request中的主选订单（dealid）
	CreativeDetails *Response_CreativeDetails `protobuf:"bytes,99,opt,name=creative_details,json=creativeDetails,proto3,oneof" json:"creative_details,omitempty"` // 实时创意信息 【高级功能】
}

func (x *Response_Bid) Reset() {
	*x = Response_Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_Bid) ProtoMessage() {}

func (x *Response_Bid) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_Bid.ProtoReflect.Descriptor instead.
func (*Response_Bid) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Response_Bid) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Response_Bid) GetImpid() string {
	if x != nil && x.Impid != nil {
		return *x.Impid
	}
	return ""
}

func (x *Response_Bid) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Response_Bid) GetAdid() string {
	if x != nil && x.Adid != nil {
		return *x.Adid
	}
	return ""
}

func (x *Response_Bid) GetExt() string {
	if x != nil && x.Ext != nil {
		return *x.Ext
	}
	return ""
}

func (x *Response_Bid) GetExt2() string {
	if x != nil && x.Ext2 != nil {
		return *x.Ext2
	}
	return ""
}

func (x *Response_Bid) GetDispExts() []string {
	if x != nil {
		return x.DispExts
	}
	return nil
}

func (x *Response_Bid) GetClickExts() []string {
	if x != nil {
		return x.ClickExts
	}
	return nil
}

func (x *Response_Bid) GetExt3() string {
	if x != nil && x.Ext3 != nil {
		return *x.Ext3
	}
	return ""
}

func (x *Response_Bid) GetDealid() string {
	if x != nil && x.Dealid != nil {
		return *x.Dealid
	}
	return ""
}

func (x *Response_Bid) GetCreativeDetails() *Response_CreativeDetails {
	if x != nil {
		return x.CreativeDetails
	}
	return nil
}

type Response_SeatBid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid []*Response_Bid `protobuf:"bytes,1,rep,name=bid,proto3" json:"bid,omitempty"` // 与request中的impression对应，可以对多个impression回复参与竞价，也可以对其中一部分回复参与竞价
}

func (x *Response_SeatBid) Reset() {
	*x = Response_SeatBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_SeatBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_SeatBid) ProtoMessage() {}

func (x *Response_SeatBid) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_SeatBid.ProtoReflect.Descriptor instead.
func (*Response_SeatBid) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Response_SeatBid) GetBid() []*Response_Bid {
	if x != nil {
		return x.Bid
	}
	return nil
}

type Response_CreativeDetails_MaterialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content *string `protobuf:"bytes,1,opt,name=content,proto3,oneof" json:"content,omitempty"` // 如果是format为txt，则content为utf-8编码的字符串；其他format为文件url
	Format  *string `protobuf:"bytes,2,opt,name=format,proto3,oneof" json:"format,omitempty"`   // 素材的格式,文件后缀名，全小写如：jpg,swf,txt(表示文字链)
}

func (x *Response_CreativeDetails_MaterialInfo) Reset() {
	*x = Response_CreativeDetails_MaterialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_CreativeDetails_MaterialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_CreativeDetails_MaterialInfo) ProtoMessage() {}

func (x *Response_CreativeDetails_MaterialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_CreativeDetails_MaterialInfo.ProtoReflect.Descriptor instead.
func (*Response_CreativeDetails_MaterialInfo) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Response_CreativeDetails_MaterialInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *Response_CreativeDetails_MaterialInfo) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

type Response_CreativeDetails_AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeepLink *string `protobuf:"bytes,1,opt,name=deep_link,json=deepLink,proto3,oneof" json:"deep_link,omitempty"` // 应用直达scheme
	AppName  *string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3,oneof" json:"app_name,omitempty"`    // app name for android
	PkgName  *string `protobuf:"bytes,3,opt,name=pkg_name,json=pkgName,proto3,oneof" json:"pkg_name,omitempty"`    // app的包名
}

func (x *Response_CreativeDetails_AppInfo) Reset() {
	*x = Response_CreativeDetails_AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tencentBidding_v3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_CreativeDetails_AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_CreativeDetails_AppInfo) ProtoMessage() {}

func (x *Response_CreativeDetails_AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tencentBidding_v3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_CreativeDetails_AppInfo.ProtoReflect.Descriptor instead.
func (*Response_CreativeDetails_AppInfo) Descriptor() ([]byte, []int) {
	return file_tencentBidding_v3_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *Response_CreativeDetails_AppInfo) GetDeepLink() string {
	if x != nil && x.DeepLink != nil {
		return *x.DeepLink
	}
	return ""
}

func (x *Response_CreativeDetails_AppInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *Response_CreativeDetails_AppInfo) GetPkgName() string {
	if x != nil && x.PkgName != nil {
		return *x.PkgName
	}
	return ""
}

var File_tencentBidding_v3_proto protoreflect.FileDescriptor

var file_tencentBidding_v3_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x22, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x02, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x48, 0x02, 0x52, 0x04,
	0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x03, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x48, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0a, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x48, 0x06, 0x52, 0x03, 0x61, 0x70, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x75,
	0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x69, 0x6b, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x74, 0x77, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x88, 0x01, 0x01, 0x1a, 0xaf, 0x0e, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x48, 0x03, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x04, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x6e, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x73, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0a, 0x61, 0x64, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x69,
	0x6d, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x48, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x45,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c,
	0x52, 0x06, 0x74, 0x61, 0x67, 0x53, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x69,
	0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x74, 0x77, 0x69, 0x6e,
	0x49, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x40, 0x0a, 0x06, 0x49,
	0x6d, 0x70, 0x45, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x63, 0x68, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x68, 0x69, 0x64, 0x1a, 0xd5, 0x01,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xb7, 0x02, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a,
	0x82, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6d, 0x69, 0x6d,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x69, 0x6d, 0x65, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x61,
	0x64, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x61, 0x67,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6d, 0x70,
	0x5f, 0x65, 0x78, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x73, 0x65, 0x71, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x77,
	0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x1a, 0x94, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65,
	0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x9c, 0x09,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x75, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x75, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x6f, 0x48, 0x02, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x64, 0x66, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04,
	0x69, 0x64, 0x66, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x64, 0x66, 0x61, 0x5f,
	0x65, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07, 0x69, 0x64, 0x66,
	0x61, 0x45, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x75,
	0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x6e, 0x75, 0x64, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x07, 0x63, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x4f, 0x73, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x03, 0x4f, 0x73, 0x76, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x4a, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x02, 0x4a, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x10, 0x52, 0x09, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x11, 0x52, 0x04, 0x6f, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x71, 0x61,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x51, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x61, 0x69, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x73,
	0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0a, 0x69, 0x64, 0x66, 0x61,
	0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x61, 0x69,
	0x64, 0x5f, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13,
	0x52, 0x0a, 0x6f, 0x61, 0x69, 0x64, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x1a,
	0x64, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x08, 0x51, 0x61, 0x69, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x71, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x71, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x71, 0x61, 0x69, 0x64, 0x5f, 0x6d,
	0x64, 0x35, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x71,
	0x61, 0x69, 0x64, 0x4d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x71, 0x61, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x64,
	0x35, 0x73, 0x75, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x75, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x65, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69,
	0x64, 0x66, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x65, 0x6e, 0x63,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x75, 0x64, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61,
	0x6b, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x6f, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4f, 0x73, 0x76, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x4a, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x6d, 0x65, 0x69, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6f, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x69, 0x64, 0x66, 0x61, 0x5f, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x61, 0x69, 0x64, 0x5f, 0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x1a, 0xab, 0x01, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x03, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x67, 0x65, 0x1a, 0x9d, 0x01, 0x0a, 0x03, 0x41,
	0x70, 0x70, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x4f, 0x0a, 0x09, 0x50, 0x6c,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x69,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x6a, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x70, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x73,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x22, 0xbb, 0x09, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x62, 0x69, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x62, 0x69, 0x64, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74,
	0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64, 0x52, 0x07, 0x73, 0x65,
	0x61, 0x74, 0x62, 0x69, 0x64, 0x1a, 0xdd, 0x04, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x41, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x75,
	0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x75, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x1a, 0x61,
	0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x1a, 0x93, 0x01, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x09, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x70, 0x6b, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x07, 0x70, 0x6b, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70,
	0x6b, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0xb4, 0x03, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x64, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x61, 0x64, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x03, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x78, 0x74, 0x32,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x65, 0x78, 0x74, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x45, 0x78, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x65, 0x78, 0x74, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04, 0x65,
	0x78, 0x74, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6d, 0x70, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x64,
	0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65,
	0x78, 0x74, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x78, 0x74, 0x33, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x2a, 0x0a, 0x07,
	0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x03, 0x62, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tencentBidding_v3_proto_rawDescOnce sync.Once
	file_tencentBidding_v3_proto_rawDescData = file_tencentBidding_v3_proto_rawDesc
)

func file_tencentBidding_v3_proto_rawDescGZIP() []byte {
	file_tencentBidding_v3_proto_rawDescOnce.Do(func() {
		file_tencentBidding_v3_proto_rawDescData = protoimpl.X.CompressGZIP(file_tencentBidding_v3_proto_rawDescData)
	})
	return file_tencentBidding_v3_proto_rawDescData
}

var file_tencentBidding_v3_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_tencentBidding_v3_proto_goTypes = []interface{}{
	(*Request)(nil),                               // 0: Request
	(*Response)(nil),                              // 1: Response
	(*Request_Impression)(nil),                    // 2: Request.Impression
	(*Request_Site)(nil),                          // 3: Request.Site
	(*Request_Device)(nil),                        // 4: Request.Device
	(*Request_User)(nil),                          // 5: Request.User
	(*Request_App)(nil),                           // 6: Request.App
	(*Request_PlayOrder)(nil),                     // 7: Request.PlayOrder
	(*Request_ChannelBlackOrders)(nil),            // 8: Request.ChannelBlackOrders
	(*Request_Impression_ImpExt)(nil),             // 9: Request.Impression.ImpExt
	(*Request_Impression_Banner)(nil),             // 10: Request.Impression.Banner
	(*Request_Impression_Video)(nil),              // 11: Request.Impression.Video
	(*Request_Impression_MaterialFormat)(nil),     // 12: Request.Impression.MaterialFormat
	(*Request_Impression_DisplayType)(nil),        // 13: Request.Impression.DisplayType
	(*Request_Device_Geo)(nil),                    // 14: Request.Device.Geo
	(*Request_Device_QaidInfo)(nil),               // 15: Request.Device.QaidInfo
	(*Response_CreativeDetails)(nil),              // 16: Response.CreativeDetails
	(*Response_Bid)(nil),                          // 17: Response.Bid
	(*Response_SeatBid)(nil),                      // 18: Response.SeatBid
	(*Response_CreativeDetails_MaterialInfo)(nil), // 19: Response.CreativeDetails.MaterialInfo
	(*Response_CreativeDetails_AppInfo)(nil),      // 20: Response.CreativeDetails.AppInfo
}
var file_tencentBidding_v3_proto_depIdxs = []int32{
	3,  // 0: Request.site:type_name -> Request.Site
	4,  // 1: Request.device:type_name -> Request.Device
	5,  // 2: Request.user:type_name -> Request.User
	2,  // 3: Request.impression:type_name -> Request.Impression
	6,  // 4: Request.app:type_name -> Request.App
	7,  // 5: Request.oids:type_name -> Request.PlayOrder
	8,  // 6: Request.channel_black_orders:type_name -> Request.ChannelBlackOrders
	18, // 7: Response.seatbid:type_name -> Response.SeatBid
	10, // 8: Request.Impression.banner:type_name -> Request.Impression.Banner
	11, // 9: Request.Impression.video:type_name -> Request.Impression.Video
	12, // 10: Request.Impression.adm_require:type_name -> Request.Impression.MaterialFormat
	9,  // 11: Request.Impression.imp_ext:type_name -> Request.Impression.ImpExt
	13, // 12: Request.Impression.display_type:type_name -> Request.Impression.DisplayType
	14, // 13: Request.Device.geo:type_name -> Request.Device.Geo
	15, // 14: Request.Device.qaid_infos:type_name -> Request.Device.QaidInfo
	12, // 15: Request.Impression.DisplayType.adm_require:type_name -> Request.Impression.MaterialFormat
	19, // 16: Response.CreativeDetails.materials:type_name -> Response.CreativeDetails.MaterialInfo
	20, // 17: Response.CreativeDetails.app_info:type_name -> Response.CreativeDetails.AppInfo
	16, // 18: Response.Bid.creative_details:type_name -> Response.CreativeDetails
	17, // 19: Response.SeatBid.bid:type_name -> Response.Bid
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_tencentBidding_v3_proto_init() }
func file_tencentBidding_v3_proto_init() {
	if File_tencentBidding_v3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tencentBidding_v3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Impression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_PlayOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_ChannelBlackOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Impression_ImpExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Impression_Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Impression_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Impression_MaterialFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Impression_DisplayType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Device_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Device_QaidInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_CreativeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_SeatBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_CreativeDetails_MaterialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tencentBidding_v3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_CreativeDetails_AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tencentBidding_v3_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_tencentBidding_v3_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tencentBidding_v3_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tencentBidding_v3_proto_goTypes,
		DependencyIndexes: file_tencentBidding_v3_proto_depIdxs,
		MessageInfos:      file_tencentBidding_v3_proto_msgTypes,
	}.Build()
	File_tencentBidding_v3_proto = out.File
	file_tencentBidding_v3_proto_rawDesc = nil
	file_tencentBidding_v3_proto_goTypes = nil
	file_tencentBidding_v3_proto_depIdxs = nil
}
